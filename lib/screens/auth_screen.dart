import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../widgets/bouncy_async_button.dart';
import '../widgets/bouncy_button.dart';
import 'package:haru_diary/widgets/cloud_card.dart';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  State<AuthScreen> createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final _emailCtrl = TextEditingController();
  final _pwdCtrl = TextEditingController();
  bool _obscurePwd = true;
  String _error = '';

  @override
  void dispose() {
    _emailCtrl.dispose();
    _pwdCtrl.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    await FirebaseAuth.instance.signInWithEmailAndPassword(
      email: _emailCtrl.text.trim(),
      password: _pwdCtrl.text.trim(),
    );
  }

  void _handleFinish() {
    if (!mounted) return;
    Navigator.pushReplacementNamed(context, '/home');
  }

  Future<void> _resetPassword() async {
    final email = _emailCtrl.text.trim();
    if (email.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')),
      );
      return;
    }
    try {
      await FirebaseAuth.instance.sendPasswordResetEmail(email: email);
      if (!mounted) return;
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text('ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Î©îÏùº Ï†ÑÏÜ°'),
          content: Text('ÏûÖÎ†•Ìïú Ïù¥Î©îÏùºÎ°ú Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Î•º Î≥¥ÎÉàÏñ¥Ïöî.\n($email)'),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('ÌôïÏù∏')),
          ],
        ),
      );
    } on FirebaseAuthException catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(e.message ?? 'Î©îÏùº Ï†ÑÏÜ° Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final cs = theme.colorScheme;
    final screenHeight = MediaQuery.of(context).size.height;
    final buttonHeight = screenHeight * 0.06;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Î°úÍ∑∏Ïù∏'),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Ïù¥Î©îÏùº
              CloudCard(
                radius: 20,
                padding: const EdgeInsets.fromLTRB(12, 12, 12, 8),
                child: TextField(
                  controller: _emailCtrl,
                  keyboardType: TextInputType.emailAddress,
                  decoration: InputDecoration(
                    labelText: 'Ïù¥Î©îÏùº',
                    hintText: 'example@google.com',
                    // üîß Ï†ÑÏó≠ filled(true) Î¨¥ÏãúÌï¥ÏÑú Ïπ¥Îìú Î∞∞Í≤ΩÎßå Î≥¥Ïù¥Í≤å
                    filled: false,
                    border: InputBorder.none,
                    isDense: true,
                    contentPadding: EdgeInsets.zero,
                  ),
                ),
              ),
              const SizedBox(height: 12),

              // ÎπÑÎ∞ÄÎ≤àÌò∏
              CloudCard(
                radius: 20,
                padding: const EdgeInsets.fromLTRB(12, 12, 12, 8),
                child: TextField(
                  controller: _pwdCtrl,
                  obscureText: _obscurePwd,
                  decoration: InputDecoration(
                    labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏',
                    hintText: '********',
                    filled: false,                // üîß
                    border: InputBorder.none,     // üîß
                    isDense: true,
                    contentPadding: EdgeInsets.zero,
                    suffixIcon: IconButton(
                      tooltip: _obscurePwd ? 'ÌëúÏãú' : 'Ïà®Í∏∞Í∏∞',
                      icon: Icon(
                        _obscurePwd ? Icons.visibility_off : Icons.visibility,
                        color: cs.outline,        // üîß ÎùºÏù¥Ìä∏ Î™®ÎìúÏóêÏÑú ÌöåÏÉâÏúºÎ°ú
                      ),
                      onPressed: () => setState(() => _obscurePwd = !_obscurePwd),
                    ),
                  ),
                ),
              ),

              // ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: _resetPassword,
                  child: const Text('ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞'),
                ),
              ),
              const SizedBox(height: 8),

              // Î°úÍ∑∏Ïù∏ (Ï£º Î≤ÑÌäº: ÌååÎûë Ïú†ÏßÄ)
              SizedBox(
                width: double.infinity,
                height: buttonHeight,
                child: BouncyAsyncButton(
                  text: 'Î°úÍ∑∏Ïù∏',
                  onPressed: () async {
                    try {
                      await _submit();
                      return;
                    } on FirebaseAuthException catch (e) {
                      setState(() => _error = e.message ?? 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò Î∞úÏÉù');
                      rethrow; // BouncyAsyncButton ÏßÑÌñâ ÏÉÅÌÉúÏóê Î∞òÏòÅÎêòÎèÑÎ°ù
                    }
                  },
                  onFinished: _handleFinish,
                ),
              ),
              const SizedBox(height: 8),

              // ÌöåÏõêÍ∞ÄÏûÖ (Î≥¥Ï°∞ Î≤ÑÌäº: Î∞ùÏùÄ Î∞∞Í≤Ω + Ïñ¥ÎëêÏö¥ ÌÖçÏä§Ìä∏)
              SizedBox(
                width: double.infinity,
                height: buttonHeight,
                child: BouncyButton(
                  text: 'ÌöåÏõêÍ∞ÄÏûÖ',
                  color: cs.surfaceVariant, // Î∞ùÏùÄ ÌöåÏÉâ Î∞∞Í≤Ω
                  // ‚¨á‚¨á BouncyButtonÏù¥ textStyle ÏßÄÏõêÌïòÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏúÑÏ†ØÏóê textStyleÎßå Ï∂îÍ∞ÄÌï¥Ï§ò!
                  textStyle: theme.textTheme.labelLarge?.copyWith(color: cs.onSurface),
                  onPressed: () => Navigator.pushNamed(context, '/signup'),
                ),
              ),

              if (_error.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 12),
                  child: Text(
                    _error,
                    style: TextStyle(color: cs.error),
                    textAlign: TextAlign.center,
                  ),
                ),

              const SizedBox(height: 24),

              // Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ (Î≥¥Ï°∞ Î≤ÑÌäº ÎèôÏùº ÌÜ§)
              SizedBox(
                width: double.infinity,
                height: buttonHeight,
                child: BouncyAsyncButton(
                  text: 'Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏',
                  color: cs.surfaceVariant,
                  textStyle: theme.textTheme.labelLarge?.copyWith(color: cs.onSurface),
                  onPressed: () async {
                    // TODO: Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
                  },
                  onFinished: () {
                    // TODO: Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏôÑÎ£å ÌõÑ Ïù¥Îèô
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
